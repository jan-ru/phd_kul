---
latex-output-dir: output
execute:
  echo: false
---
# Authors {#appendix-i}

\fontsize{9}{10}\selectfont

```{python}
# 
import bibtexparser
import requests
from IPython.display import Markdown
from tabulate import tabulate

file_path = '/Users/admin/Projects/literature/phd_kul/bib/MySelection.bib'
```

```{python, cache=TRUE}
#| label: tbl-authors
#| tbl-cap: "Authors"

def extract_authors_from_bibtex(file_path):
    with open(file_path) as bibtex_file:
        bibtex_str = bibtex_file.read()

    bib_database = bibtexparser.loads(bibtex_str)
    authors_list = []

    for entry in bib_database.entries:
        if 'author' in entry:
            entry_authors = [author.strip() for author in entry['author'].split(' and ')]
            first_author = entry_authors[0]  # Extract the first author
            other_authors = ', '.join(entry_authors[1:])  # Combine the remaining authors
            authors_list.append((first_author, other_authors))  # Append as a tuple

    # No need to sort here as tabulate will handle the display
    return authors_list

authors = extract_authors_from_bibtex(file_path)

# Format and print the table in Markdown format
Markdown(tabulate(authors, headers=["First Author", "Other Authors"], maxcolwidths=[40, 50]))
```

```{python}
import matplotlib.pyplot as plt
# import bibtexparser


def parse_bib_file(bib_file):
    with open(bib_file, 'r', encoding='utf-8') as file:
        bib_database = bibtexparser.load(file)
    return bib_database.entries


def plot_timeline(articles):
    years = []
    for article in articles:
        try:
            # Extract the year from the 'year' field
            year = int(article['year'])
            years.append(year)
        except KeyError:
            pass

    # Plot the timeline
    plt.figure(figsize=(8, 4))
    plt.hist(years, bins=[edge - 0.5 for edge in range(min(years),
                                                       max(years) + 2)],
                                                       color='skyblue',
                                                       edgecolor='black')
    plt.title('Timeline of Publications\nn={}'.format(len(articles)))
    plt.ylabel('Number of Articles')
    plt.xticks(range(min(years), max(years) + 2))

    # Set y-axis ticks to integer values
    plt.yticks(range(int(min(plt.gca().get_ylim())), 
                     int(max(plt.gca().get_ylim())) + 1))
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    bib_file = 'bib/MySelection.bib'  # Replace with the path to your .bib file
    articles = parse_bib_file(bib_file)
    plot_timeline(articles)
```


\fontsize{11}{12}\selectfont